name: Build & Push Multi-Arch FE + BE
on:
  push:
    branches: ['main', 'develop']
  pull_request:
    branches: ['main']

env:
  REGISTRY: docker.io
  KEEP_IMAGES: 3  # Keep only the latest 3 images

jobs:
  # Job 1: Setup and validation
  setup:
    runs-on: ubuntu-latest
    outputs:
      should_push: ${{ steps.check.outputs.should_push }}
      timestamp_tag: ${{ steps.timestamp.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Check if should push
        id: check
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" && "${{ github.event_name }}" == "push" ]]; then
            echo "should_push=true" >> $GITHUB_OUTPUT
          else
            echo "should_push=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Generate timestamp tag
        id: timestamp
        run: echo "tag=$(date +'%m%d%Y%H%M')" >> $GITHUB_OUTPUT

  # Job 2: Build and Push Frontend (Multi-Architecture)
  build-push-frontend:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/amd64,linux/arm64
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64
      
      - name: Log in to Docker Hub
        if: needs.setup.outputs.should_push == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Build and push Frontend (multi-arch)
        uses: docker/build-push-action@v5
        with:
          context: ./FE
          platforms: linux/amd64,linux/arm64
          tags: |
            jsrankit/cdm-ui:${{ needs.setup.outputs.timestamp_tag }}
            jsrankit/cdm-ui:latest
          push: ${{ needs.setup.outputs.should_push == 'true' }}
          cache-from: type=gha,scope=frontend
          cache-to: type=gha,mode=max,scope=frontend
          provenance: false
          sbom: false

  # Job 3: Build and Push Backend (Multi-Architecture)
  build-push-backend:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/amd64,linux/arm64
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64
      
      - name: Log in to Docker Hub
        if: needs.setup.outputs.should_push == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Build and push Backend (multi-arch)
        uses: docker/build-push-action@v5
        with:
          context: ./BE
          platforms: linux/amd64,linux/arm64
          tags: |
            jsrankit/cdm-server:${{ needs.setup.outputs.timestamp_tag }}
            jsrankit/cdm-server:latest
          push: ${{ needs.setup.outputs.should_push == 'true' }}
          cache-from: type=gha,scope=backend
          cache-to: type=gha,mode=max,scope=backend
          provenance: false
          sbom: false

  # Job 4: Test Multi-Arch Images (Optional)
  test-images:
    runs-on: ubuntu-latest
    needs: [setup, build-push-frontend, build-push-backend]
    if: needs.setup.outputs.should_push == 'true' && always()
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]
        image: 
          - { name: jsrankit/cdm-ui, port: 8080 }
          - { name: jsrankit/cdm-server, port: 3001 }
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: ${{ matrix.platform }}
      
      - name: Test image on ${{ matrix.platform }}
        run: |
          echo "Testing ${{ matrix.image.name }}:${{ needs.setup.outputs.timestamp_tag }} on ${{ matrix.platform }}"
          # Pull and inspect the multi-arch image
          docker pull --platform=${{ matrix.platform }} ${{ matrix.image.name }}:${{ needs.setup.outputs.timestamp_tag }}
          docker inspect ${{ matrix.image.name }}:${{ needs.setup.outputs.timestamp_tag }}
          
          # Quick container start test (modify as needed for your apps)
          # docker run --rm --platform=${{ matrix.platform }} -d --name test-container -p ${{ matrix.image.port }}:${{ matrix.image.port }} ${{ matrix.image.name }}:${{ needs.setup.outputs.timestamp_tag }}
          # sleep 10
          # docker stop test-container || true
          
          echo "✅ Image test completed for ${{ matrix.platform }}"

  # Job 5: Cleanup old Docker Hub images
  cleanup-dockerhub:
    runs-on: ubuntu-latest
    needs: [setup, build-push-frontend, build-push-backend]
    if: needs.setup.outputs.should_push == 'true' && always()
    strategy:
      matrix:
        repository: [jsrankit/cdm-ui, jsrankit/cdm-server]
    steps:
      - name: Cleanup old Docker Hub tags
        uses: actions/github-script@v7
        with:
          script: |
            const repository = '${{ matrix.repository }}';
            const keepCount = parseInt('${{ env.KEEP_IMAGES }}');
            const username = '${{ secrets.DOCKER_USERNAME }}';
            const token = '${{ secrets.DOCKER_PASSWORD }}';
            
            console.log(`Cleaning up ${repository}, keeping ${keepCount} latest images`);
            
            try {
              // Get Docker Hub token
              const tokenResponse = await fetch('https://hub.docker.com/v2/users/login', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                  username: username,
                  password: token
                })
              });
              
              if (!tokenResponse.ok) {
                throw new Error(`Failed to authenticate with Docker Hub: ${tokenResponse.status}`);
              }
              
              const tokenData = await tokenResponse.json();
              const hubToken = tokenData.token;
              
              // Get list of tags
              const tagsResponse = await fetch(`https://hub.docker.com/v2/repositories/${repository}/tags?page_size=100`, {
                headers: {
                  'Authorization': `Bearer ${hubToken}`
                }
              });
              
              if (!tagsResponse.ok) {
                throw new Error(`Failed to fetch tags: ${tagsResponse.status}`);
              }
              
              const tagsData = await tagsResponse.json();
              const allTags = tagsData.results || [];
              
              console.log(`Found ${allTags.length} total tags`);
              
              // Filter out 'latest' tag and sort by last_updated (newest first)
              const timestampTags = allTags
                .filter(tag => tag.name !== 'latest' && /^\d{12}$/.test(tag.name))
                .sort((a, b) => new Date(b.last_updated) - new Date(a.last_updated));
              
              console.log(`Found ${timestampTags.length} timestamp tags`);
              
              // Keep only the latest N images, delete the rest
              const tagsToDelete = timestampTags.slice(keepCount);
              
              console.log(`Will delete ${tagsToDelete.length} old tags`);
              
              for (const tag of tagsToDelete) {
                console.log(`Deleting tag: ${tag.name} (${tag.last_updated})`);
                
                const deleteResponse = await fetch(`https://hub.docker.com/v2/repositories/${repository}/tags/${tag.name}/`, {
                  method: 'DELETE',
                  headers: {
                    'Authorization': `Bearer ${hubToken}`
                  }
                });
                
                if (deleteResponse.ok) {
                  console.log(`✅ Successfully deleted ${tag.name}`);
                } else {
                  console.log(`❌ Failed to delete ${tag.name}: ${deleteResponse.status}`);
                }
                
                // Add small delay to avoid rate limiting
                await new Promise(resolve => setTimeout(resolve, 1000));
              }
              
              console.log(`Cleanup completed for ${repository}`);
              
            } catch (error) {
              console.error(`Error cleaning up ${repository}:`, error);
              // Don't fail the workflow for cleanup errors
            }
