name: Build and Push Docker Images

on:
  push:
    branches: ["*"]  # runs on ALL branches for every commit
  pull_request:
    branches: ["*"]  # runs for PRs targeting any branch

env:
  REGISTRY: docker.io
  FRONTEND_IMAGE: jsrankit/cdm-ui
  BACKEND_IMAGE: jsrankit/cdm-server

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false  # continue other builds if one fails
      matrix:
        service:
          - name: frontend
            context: ./frontend
            image: jsrankit/cdm-ui
            dockerfile: ./frontend/Dockerfile
          - name: backend
            context: ./backend
            image: jsrankit/cdm-server
            dockerfile: ./backend/Dockerfile
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # fetch full history for better caching
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:buildx-stable-1
      
      - name: Generate metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ matrix.service.image }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value={{date 'YYYYMMDD-HHmmss'}}
          labels: |
            org.opencontainers.image.title=${{ matrix.service.name }}
            org.opencontainers.image.description=CDM ${{ matrix.service.name }} service
            org.opencontainers.image.vendor=jsrankit
      
      - name: Check if Dockerfile exists
        id: dockerfile-check
        run: |
          if [ -f "${{ matrix.service.dockerfile }}" ] || [ -f "${{ matrix.service.context }}/Dockerfile" ]; then
            echo "dockerfile-exists=true" >> $GITHUB_OUTPUT
            if [ -f "${{ matrix.service.dockerfile }}" ]; then
              echo "dockerfile-path=${{ matrix.service.dockerfile }}" >> $GITHUB_OUTPUT
            else
              echo "dockerfile-path=${{ matrix.service.context }}/Dockerfile" >> $GITHUB_OUTPUT
            fi
          else
            echo "dockerfile-exists=false" >> $GITHUB_OUTPUT
            echo "::warning::No Dockerfile found for ${{ matrix.service.name }} service"
          fi
      
      - name: Log in to Docker Hub
        if: steps.dockerfile-check.outputs.dockerfile-exists == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
        continue-on-error: false
      
      - name: Build Docker image
        if: steps.dockerfile-check.outputs.dockerfile-exists == 'true'
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.service.context }}
          file: ${{ steps.dockerfile-check.outputs.dockerfile-path }}
          push: false  # build first, push later
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ matrix.service.name }}
          cache-to: type=gha,mode=max,scope=${{ matrix.service.name }}
          platforms: linux/amd64,linux/arm64  # multi-platform support
        id: build
        continue-on-error: false
      
      - name: Test Docker image
        if: steps.dockerfile-check.outputs.dockerfile-exists == 'true' && steps.build.outcome == 'success'
        run: |
          # Basic smoke test - check if image runs
          docker run --rm --entrypoint="" ${{ matrix.service.image }}:${{ steps.meta.outputs.version }} sh -c "echo 'Image test passed'" || {
            echo "::error::Image smoke test failed for ${{ matrix.service.name }}"
            exit 1
          }
        continue-on-error: false
      
      - name: Run security scan
        if: steps.dockerfile-check.outputs.dockerfile-exists == 'true' && steps.build.outcome == 'success'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ matrix.service.image }}:${{ steps.meta.outputs.version }}
          format: 'sarif'
          output: 'trivy-results-${{ matrix.service.name }}.sarif'
        continue-on-error: true  # don't fail build on security issues, just warn
      
      - name: Upload Trivy scan results
        if: steps.dockerfile-check.outputs.dockerfile-exists == 'true'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results-${{ matrix.service.name }}.sarif'
        continue-on-error: true
      
      - name: Push Docker image
        if: |
          steps.dockerfile-check.outputs.dockerfile-exists == 'true' && 
          steps.build.outcome == 'success' &&
          (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.service.context }}
          file: ${{ steps.dockerfile-check.outputs.dockerfile-path }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ matrix.service.name }}
          platforms: linux/amd64,linux/arm64
        continue-on-error: false
      
      - name: Image digest
        if: steps.dockerfile-check.outputs.dockerfile-exists == 'true'
        run: echo "Image pushed with digest ${{ steps.build.outputs.digest }}"

  notify:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: always()  # run even if builds fail
    steps:
      - name: Notify build status
        run: |
          if [[ "${{ needs.build-and-push.result }}" == "success" ]]; then
            echo "✅ All Docker images built and pushed successfully!"
          elif [[ "${{ needs.build-and-push.result }}" == "failure" ]]; then
            echo "❌ Docker build failed!"
            exit 1
          else
            echo "⚠️  Docker build completed with warnings"
          fi
