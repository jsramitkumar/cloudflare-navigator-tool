name: Build & Push FE + BE
on:
  push:
    branches: ['main', 'develop']
  pull_request:
    branches: ['main']

env:
  REGISTRY: docker.io

jobs:
  # Job 1: Setup and validation
  setup:
    runs-on: ubuntu-latest
    outputs:
      should_push: ${{ steps.check.outputs.should_push }}
      timestamp_tag: ${{ steps.timestamp.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Check if should push
        id: check
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" && "${{ github.event_name }}" == "push" ]]; then
            echo "should_push=true" >> $GITHUB_OUTPUT
          else
            echo "should_push=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Generate timestamp tag
        id: timestamp
        run: echo "tag=$(date +'%m%d%Y%H%M')" >> $GITHUB_OUTPUT

  # Job 2: Build Frontend
  build-frontend:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./FE
          tags: jsrankit/cdm-ui:${{ needs.setup.outputs.timestamp_tag }}
          load: true
          cache-from: type=gha,scope=frontend
          cache-to: type=gha,mode=max,scope=frontend
      
      - name: Save Frontend image
        if: needs.setup.outputs.should_push == 'true'
        run: docker save jsrankit/cdm-ui:${{ needs.setup.outputs.timestamp_tag }} | gzip > frontend-image.tar.gz
      
      - name: Upload Frontend artifact
        if: needs.setup.outputs.should_push == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: frontend-image
          path: frontend-image.tar.gz
          retention-days: 1

  # Job 3: Build Backend
  build-backend:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Backend image
        uses: docker/build-push-action@v5
        with:
          context: ./BE
          tags: jsrankit/cdm-server:${{ needs.setup.outputs.timestamp_tag }}
          load: true
          cache-from: type=gha,scope=backend
          cache-to: type=gha,mode=max,scope=backend
      
      - name: Save Backend image
        if: needs.setup.outputs.should_push == 'true'
        run: docker save jsrankit/cdm-server:${{ needs.setup.outputs.timestamp_tag }} | gzip > backend-image.tar.gz
      
      - name: Upload Backend artifact
        if: needs.setup.outputs.should_push == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: backend-image
          path: backend-image.tar.gz
          retention-days: 1

  # Job 4: Test Frontend (optional)
  test-frontend:
    runs-on: ubuntu-latest
    needs: [setup, build-frontend]
    if: always() && needs.build-frontend.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download Frontend artifact
        if: needs.setup.outputs.should_push == 'true'
        uses: actions/download-artifact@v4
        with:
          name: frontend-image
      
      - name: Load and test Frontend image
        if: needs.setup.outputs.should_push == 'true'
        run: |
          docker load < frontend-image.tar.gz
          # Add your frontend tests here
          # docker run --rm jsrankit/cdm-ui:${{ needs.setup.outputs.timestamp_tag }} npm test
          echo "Frontend tests would run here"

  # Job 5: Test Backend (optional)
  test-backend:
    runs-on: ubuntu-latest
    needs: [setup, build-backend]
    if: always() && needs.build-backend.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download Backend artifact
        if: needs.setup.outputs.should_push == 'true'
        uses: actions/download-artifact@v4
        with:
          name: backend-image
      
      - name: Load and test Backend image
        if: needs.setup.outputs.should_push == 'true'
        run: |
          docker load < backend-image.tar.gz
          # Add your backend tests here
          # docker run --rm jsrankit/cdm-server:${{ needs.setup.outputs.timestamp_tag }} npm test
          echo "Backend tests would run here"

  # Job 6: Push Frontend to Registry
  push-frontend:
    runs-on: ubuntu-latest
    needs: [setup, build-frontend, test-frontend]
    if: needs.setup.outputs.should_push == 'true' && (always() && needs.build-frontend.result == 'success')
    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Download Frontend artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-image
      
      - name: Load and push Frontend image
        run: |
          docker load < frontend-image.tar.gz
          docker tag jsrankit/cdm-ui:${{ needs.setup.outputs.timestamp_tag }} jsrankit/cdm-ui:latest
          docker push jsrankit/cdm-ui:${{ needs.setup.outputs.timestamp_tag }}
          docker push jsrankit/cdm-ui:latest

  # Job 7: Push Backend to Registry
  push-backend:
    runs-on: ubuntu-latest
    needs: [setup, build-backend, test-backend]
    if: needs.setup.outputs.should_push == 'true' && (always() && needs.build-backend.result == 'success')
    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Download Backend artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-image
      
      - name: Load and push Backend image
        run: |
          docker load < backend-image.tar.gz
          docker tag jsrankit/cdm-server:${{ needs.setup.outputs.timestamp_tag }} jsrankit/cdm-server:latest
          docker push jsrankit/cdm-server:${{ needs.setup.outputs.timestamp_tag }}
          docker push jsrankit/cdm-server:latest

  # Job 8: Security Scanning (optional)
  security-scan:
    runs-on: ubuntu-latest
    needs: [setup, push-frontend, push-backend]
    if: needs.setup.outputs.should_push == 'true' && always()
    strategy:
      matrix:
        image: [jsrankit/cdm-ui, jsrankit/cdm-server]
        component: [frontend, backend]
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ matrix.image }}:latest
          format: 'sarif'
          output: 'trivy-${{ matrix.component }}-results.sarif'
      
      - name: Upload scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-${{ matrix.component }}-results.sarif'

  # Job 9: Cleanup
  cleanup:
    runs-on: ubuntu-latest
    needs: [push-frontend, push-backend]
    if: always()
    steps:
      - name: Delete artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId,
            });
            
            for (const artifact of artifacts.data.artifacts) {
              if (artifact.name.includes('-image')) {
                await github.rest.actions.deleteArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: artifact.id,
                });
                console.log(`Deleted artifact: ${artifact.name}`);
              }
            }
